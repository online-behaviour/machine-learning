#!/usr/bin/python -W all
"""
    combineAnnotations.py: combine the tags generated by machine learning experiments
    usage: combineAnnotations.py file1 [file2 ...]
    note expected line format: hashsign number colon gold-tag guessed-tag confidence-score
    20170418 erikt(at)xs4all.nl
"""

import re
import sys

# this command
COMMAND = sys.argv[0]
# other tag
OTHER = "O"
# unknwon tag
NONE = "-1"

# get files
files = sys.argv
# remove command from file list
files.pop(0)
# initialize gold tags, guess tags and confidence values
goldTags = {}
guessedTags = {}
confidenceValues = {}
history = {}
# process files
for file in files:
    try:
        f = open(file,"r") # try to open the current input file
    except:
        sys.stderr.write(COMMAND+": cannot read file "+file+"!\n")
    # determine gold tag based on fila name
    fields = file.split(".")
    fileNameGoldTag = fields[-1]
    patternHash = re.compile("^#")
    # read each line of the fil
    for line in f:
        # only process line that start with a hash sign
        if patternHash.match(line):
           # split the line in fields based on white space separators
           fields = line.split()
           # line should contain at least five fields
           if len(fields) >= 5:
              # give the field elements names: id, gold-tag, guessed-tag, confidence
              thisId = fields[1]
              gold = fields[2]
              guess = fields[3]
              confidence = float(fields[4])
              # if the gold tag is not blank: store it
              if gold != OTHER: 
                  goldTags[thisId] = gold
                  # sanity check
                  if gold != fileNameGoldTag and gold != NONE: 
                      sys.exit(COMMAND+": gold tag does not match file name! ("+gold+","+file+")\n")
              # store the most confident prediction with confidence > 0
              if confidence > 0:
                 # ignore the guess: it is only set when confidence > 0.5
                 # store guess in history
                 if thisId in history: history[thisId] += " "+fileNameGoldTag+":"+str(confidence)
                 else: history[thisId] = fileNameGoldTag+":"+str(confidence)
                 # keep the tag with the highest confidence
                 if not thisId in guessedTags or confidence > confidenceValues[thisId]:
                     guessedTags[thisId] = fileNameGoldTag
                     confidenceValues[thisId] = confidence

# determine default guess: most frequently guessed tag
counts = {}
for thisId in guessedTags:
    guess = guessedTags[thisId]
    if guess in counts: counts[guess] += 1
    else: counts[guess] = 1
bestGuess = ""
bestCount = -1
for guess in counts:
    if counts[guess] > bestCount:
        bestGuess = guess
        bestCount = counts[guess]

# show results
for thisId in sorted(goldTags.iterkeys()):
    # sanity checks: guessed-id should be in goldTags and confidenceValues
    if not thisId in history: history[thisId] = ""
    if not thisId in goldTags: goldTags[thisId] = NONE
    if not thisId in guessedTags: guessedTags[thisId] = bestGuess
    if not thisId in confidenceValues: confidenceValues[thisId] = 0.0
    # show results
    print "# %s %s %s %0.3f %s" % (thisId,goldTags[thisId],guessedTags[thisId],confidenceValues[thisId],history[thisId])

